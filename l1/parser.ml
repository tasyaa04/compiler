type token =
  | INT of (
# 9 "parser.mly"
        int
# 6 "parser.ml"
)
  | LOC of (
# 10 "parser.mly"
        string
# 11 "parser.ml"
)
  | BOOL of (
# 11 "parser.mly"
        bool
# 16 "parser.ml"
)
  | ADD
  | GEQ
  | SEMICOLON
  | LPAREN
  | RPAREN
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | ASSIGN
  | DEREF
  | EOF

open Parsing
let _ = parse_error;;
# 4 "parser.mly"

let get_loc = Parsing.symbol_start_pos 

# 38 "parser.ml"
let yytransl_const = [|
  260 (* ADD *);
  261 (* GEQ *);
  262 (* SEMICOLON *);
  263 (* LPAREN *);
  264 (* RPAREN *);
  265 (* IF *);
  266 (* THEN *);
  267 (* ELSE *);
  268 (* WHILE *);
  269 (* DO *);
  270 (* ASSIGN *);
  271 (* DEREF *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* LOC *);
  259 (* BOOL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\003\000\001\000\003\000\003\000\006\000\
\003\000\002\000\003\000\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\000\000\003\000\000\000\000\000\000\000\
\000\000\013\000\005\000\000\000\000\000\000\000\000\000\000\000\
\010\000\000\000\000\000\000\000\001\000\000\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\010\000\011\000\012\000"

let yysindex = "\255\255\
\036\255\000\000\000\000\252\254\000\000\036\255\036\255\036\255\
\030\255\000\000\000\000\031\000\036\255\022\255\002\255\254\254\
\000\000\036\255\036\255\036\255\000\000\010\255\000\000\036\255\
\036\255\027\255\038\255\010\255\014\255\010\255\036\255\010\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\009\000\000\000\000\000\
\000\000\001\000\005\000\013\000\000\000\017\000\000\000\021\000"

let yygindex = "\000\000\
\000\000\000\000\016\000"

let yytablesize = 293
let yytable = "\001\000\
\006\000\018\000\019\000\020\000\007\000\018\000\019\000\020\000\
\009\000\013\000\025\000\024\000\011\000\018\000\019\000\020\000\
\012\000\018\000\019\000\020\000\008\000\014\000\015\000\016\000\
\031\000\018\000\019\000\020\000\022\000\023\000\021\000\017\000\
\020\000\026\000\027\000\028\000\003\000\004\000\005\000\029\000\
\030\000\018\000\006\000\020\000\007\000\000\000\032\000\008\000\
\000\000\000\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\000\006\000\000\000\000\000\
\006\000\007\000\006\000\006\000\007\000\006\000\007\000\007\000\
\009\000\007\000\009\000\009\000\011\000\009\000\011\000\011\000\
\012\000\011\000\012\000\012\000\008\000\012\000\008\000\008\000\
\000\000\008\000\018\000\019\000\020\000"

let yycheck = "\001\000\
\000\000\004\001\005\001\006\001\000\000\004\001\005\001\006\001\
\000\000\014\001\013\001\010\001\000\000\004\001\005\001\006\001\
\000\000\004\001\005\001\006\001\000\000\006\000\007\000\008\000\
\011\001\004\001\005\001\006\001\013\000\008\001\000\000\002\001\
\006\001\018\000\019\000\020\000\001\001\002\001\003\001\024\000\
\025\000\004\001\007\001\006\001\009\001\255\255\031\000\012\001\
\255\255\255\255\015\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\004\001\005\001\255\255\255\255\
\008\001\005\001\010\001\011\001\008\001\013\001\010\001\011\001\
\008\001\013\001\010\001\011\001\008\001\013\001\010\001\011\001\
\008\001\013\001\010\001\011\001\008\001\013\001\010\001\011\001\
\255\255\013\001\004\001\005\001\006\001"

let yynames_const = "\
  ADD\000\
  GEQ\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  ASSIGN\000\
  DEREF\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  LOC\000\
  BOOL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Past.expr) in
    Obj.repr(
# 31 "parser.mly"
                         ( _1 )
# 201 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 34 "parser.mly"
                                     ( Past.Integer (get_loc(), _1) )
# 208 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 35 "parser.mly"
                ( Past.Boolean (get_loc(), _1) )
# 215 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Past.expr) in
    Obj.repr(
# 36 "parser.mly"
                                     ( _2 )
# 222 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 39 "parser.mly"
                                     (  _1 )
# 229 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 40 "parser.mly"
                                     ( Past.Op(get_loc(), _1, Past.ADD, _3) )
# 237 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 41 "parser.mly"
                      ( Past.Op(get_loc(), _1, Past.GEQ, _3) )
# 245 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Past.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 42 "parser.mly"
                                 ( Past.If(get_loc(), _2, _4, _6) )
# 254 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 43 "parser.mly"
                        ( Past.Assign(get_loc(), _1, _3))
# 262 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 44 "parser.mly"
                   ( Past.Deref(get_loc(), _2))
# 269 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 45 "parser.mly"
                          ( Past.Seq(get_loc(), _1, _3))
# 277 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 46 "parser.mly"
                         ( Past.While(get_loc(), _2, _4))
# 285 "parser.ml"
               : Past.expr))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Past.expr)
